@page "/views/ro"
@page "/views/ro/{id:int}"

@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using ObservingThingy.Data
@using ObservingThingy.DataAccess
@using Microsoft.Extensions.Logging

@implements IDisposable

@inject HostsRepository _hostsrepo
@inject HostStatesRepository _staterepo
@inject HostListsRepository _hostlistsrepo
@inject TagsRepository _tagsrepo
@inject EventRepository _eventrepo
@inject ILoggerFactory _loggerfactory

<div class="ui fluid basic inverted container">

    <!-- <h1>Hosts</h1> -->
    <div id="table" class="ui basic inverted segment">
        @foreach (var host in hosts)
        {
            <!-- row start -->
            <div class="primary-actions">

            </div>

            <div class="name">
                <h2 class="ui inverted sub header">
                    @host.Name
                </h2>
                <span>
                    @host.Hostname
                </span>
            </div>

            <div class="tags">
                @foreach (var link in host.TagToHosts)
                {
                    <div class="ui @link.Tag.Color label">
                        @link.Tag.Name
                    </div>
                }
            </div>

            <div class="states">
                <div class="pingsegments">
                    @foreach (var state in @_staterepo.GetForHost(@host.Id, 16))
                    {
                        <div class="pingsegment @state.Status" title="@state"></div>
                    }
                </div>
            </div>

            <div class="secondary-actions">
                <!-- <div class="ui compact disabled icon inverted button">
                    <i class="info icon"></i>
                </div> -->
                @if (host.Id == activehostid)
                {
                    <a class="ui compact icon green button" href="observingconnect:@host.Hostname">
                        <i class="desktop icon"></i>
                    </a>
                }
                else
                {
                    <a class="ui compact icon inverted button" @onclick="@(e => SetActiveHostId(host))" href="observingconnect:@host.Hostname">
                        <i class="desktop icon"></i>
                    </a>
                }
            </div>
            <!-- row end -->
        }
    </div>

</div>

<div class="inverted background">

</div>

@code
{
    [Parameter]
    private int id { get; set; }

    private ILogger<HostlistViewReadOnly> _logger; 

    List<Host> hosts { get; set; }

    List<Tag> tags { get; set; }

    private bool active = true;

    private int activehostid = 0;

    protected override async Task OnInitAsync()
    {
        await RefreshHosts();
        tags = await _tagsrepo.GetAllVisible();
        
        _logger = _loggerfactory.CreateLogger<HostlistViewReadOnly>();

        RefreshLoop();
    }


    private async Task RefreshLoop()
    {
        _logger.LogInformation("HostlistViewReadOnly has been opened");

        while (active)
        {
            await Task.Delay(3000); // 3 seconds
            await RefreshHosts();
            StateHasChanged();
        }

        _logger.LogInformation("HostlistViewReadOnly has been disposed");
    }

    private void SetActiveHostId(Host host)
    {
        activehostid = host.Id;
    }

    private async Task RefreshHosts()
    {
        if (id == 0)
            hosts = await _hostsrepo.GetAllActive();
        else
            hosts = await _hostsrepo.GetAllActive(id);
    }

    public void Dispose()
    {
        active = false;
    }
}