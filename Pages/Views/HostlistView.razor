@page "/views"
@page "/views/{id:int}"

@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using ObservingThingy.Data
@using ObservingThingy.DataAccess

@implements IDisposable

@inject HostsRepository _hostsrepo
@inject HostStatesRepository _staterepo
@inject HostListsRepository _hostlistsrepo
@inject TagsRepository _tagsrepo
@inject EventRepository _eventrepo

<div class="ui fluid basic segment inverted container">

    <!-- <h1>Hosts</h1> -->

    <table class="ui single line very basic very compact unstackable inverted table">
        <tbody>
            @foreach (var host in hosts)
            {
                <tr>
                    <td class="collapsing">
                        @foreach (var tag in tags)
                        {
                            <div class="ui compact basic icon inverted button" @onclick="@(e => AddTagToHost(tag, host))">
                                <i class="@tag.Icon icon"></i>
                            </div>
                        }
                    </td>

                    <td class="collapsing">
                        <h2 class="ui sub header">
                            @host.Name
                        </h2>
                        <span>
                            @host.Hostname
                        </span>
                    </td>

                    <td>
                        @foreach (var link in host.TagToHosts)
                        {
                            <div class="ui @link.Tag.Color label">
                                @link.Tag.Name
                                <i class="delete icon" @onclick="@(e => RemoveTagFromHost(link.Tag, host))"></i>
                            </div>
                        }
                    </td>

                    <td class="right aligned collapsing">
                        <div class="pingsegments">
                            @foreach (var state in @_staterepo.GetForHost(@host.Id, 16))
                            {
                                <div class="pingsegment @state.Status" title="@state"></div>
                            }
                        </div>
                    </td>

                    <td class="right aligned collapsing">
                        <!-- <div class="ui compact disabled icon inverted button">
                            <i class="info icon"></i>
                        </div> -->
                        <a class="ui compact icon inverted button" href="observingconnect:@host.Hostname">
                            <i class="desktop icon"></i>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>

<div class="inverted background">

</div>

@code
{
    [Parameter]
    private int id { get; set; }

    List<Host> hosts { get; set; }

    List<Tag> tags { get; set; }

    private bool active = true;

    protected override async Task OnInitAsync()
    {
        await RefreshHosts();
        tags = await _tagsrepo.GetAllVisible();
        
        RefreshLoop();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshHosts();
    }

    private async Task RefreshLoop()
    {
        while (active)
        {
            await Task.Delay(3000); // 3 seconds
            await RefreshHosts();
            StateHasChanged();
        }
    }

    private async Task RefreshHosts()
    {
        if (id == 0)
            hosts = await _hostsrepo.GetAllActive();
        else
            hosts = await _hostsrepo.GetAllActive(id);
    }

    private async Task AddTagToHost(Tag tag, Host host)
    {
        try
        {
            await _tagsrepo.AddTagToHost(tag.Id, host.Id);
            await _eventrepo.Enqueue(new TagAddedEvent { TagId = tag.Id, HostId = host.Id });
            await RefreshHosts();
        } catch (Exception) {}
    }

    private async Task RemoveTagFromHost(Tag tag, Host host)
    {
        try
        {
            await _tagsrepo.RemoveTagFromHost(tag.Id, host.Id);
            await _eventrepo.Enqueue(new TagRemovedEvent { TagId = tag.Id, HostId = host.Id });
            await RefreshHosts();
        } catch (Exception) {}
    }

    public void Dispose()
    {
        active = false;
    }
}