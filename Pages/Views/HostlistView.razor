@page "/views"
@page "/views/{id:int}"

@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using ObservingThingy.Data
@using ObservingThingy.DataAccess

@implements IDisposable

@inject HostsRepository _hostsrepo
@inject HostListsRepository _hostlistsrepo

<div class="ui fluid basic segment container">

    <!-- <h1>Hosts</h1> -->

    <table class="ui very basic very compact table">
        <thead>
            <tr>
                <th>Actions</th>
                <th>Name</th>
                <th>Tags</th>
                <th>Ping</th>
                <th>Secondary Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var host in hosts)
            {
                <tr>
                    <td class="collapsing">
                        <div class="ui disabled basic icon button">
                            <i class="cloud icon"></i>
                        </div>
                    </td>

                    <td class="collapsing">
                        <h2 class="ui sub header">
                            @host.Hostname
                        </h2>
                        <span>
                            @host.Name
                        </span>
                    </td>

                    <td>
                        <div class="ui green label">
                            Online
                            <i class="delete icon"></i>
                        </div>
                    </td>

                    <td class="right aligned collapsing">
                        <div class="pingsegments">
                            @foreach (var state in @host.States.TakeLast(10))
                            {
                                <div class="pingsegment @state.Status" title="@state.Delay"></div>
                            }
                        </div>
                    </td>

                    <td class="right aligned collapsing">
                        <div class="ui disabled button">
                            Connect
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>

@code
{
    [Parameter]
    private int id { get; set; }

    List<Host> hosts { get; set; }

    private bool active = true;

    protected override async Task OnInitAsync()
    {
        await RefreshHosts();

        RefreshLoop();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshHosts();
    }

    private async Task RefreshLoop()
    {
        while (active)
        {
            await Task.Delay(3000); // 3 seconds
            await RefreshHosts();
            StateHasChanged();
        }
    }

    private async Task RefreshHosts()
    {
        if (id == 0)
            hosts = await _hostsrepo.GetAllActiveWithStates();
        else
            hosts = await _hostsrepo.GetAllActiveWithStates(id);
    }

    public void Dispose()
    {
        active = false;
    }
}