@page "/config/hostlists"

@using System.Collections.Generic
@using System.ComponentModel.DataAnnotations
@using ObservingThingy.Data

@* @inject HostsDataRepository _hostsrepo *@
@inject HostListsDataRepository _hostlistsrepo

<div class="ui fluid basic segment container">

    <h1>Host Lists</h1>

    <table class="ui table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Hosts</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hostlist in hostlists)
            {
                <tr>
                    <td class="collapsing">@hostlist.Id</td>
                    <td class="collapsing">@hostlist.Name</td>
                    <td>@hostlist.HostListToHosts.Count</td>
                    <td class="right aligned">
                        <div class="ui disabled button">Edit</div>
                        @if(@hostlist.IsValid)
                        {
                            <div class="ui button" @onclick="@(e => ToggleActiveState(@hostlist))">Disable</div>
                        }
                        else
                        {
                            <div class="ui button" @onclick="@(e => ToggleActiveState(@hostlist))">Enable</div>
                        }
                        <div class="ui negative button" @onclick="@(e => DeleteHostList(@hostlist))">Delete</div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <EditForm class="ui form" Model="@_data" OnValidSubmit="@AddNewHostList">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="fields">

            <div class="field">
                <label for="">Name</label>
                <input type="text" @bind="@_data.Name"/>
            </div>

        </div>

        <button class="ui positive button" type="submit">Create</button>

    </EditForm>
</div>

@code
{
    List<HostList> hostlists { get; set; }

    NewHostListDataModel _data { get; set; } = new NewHostListDataModel();

    protected override async Task OnInitAsync()
    {
        hostlists = await _hostlistsrepo.GetAll();
    }

    protected async Task AddNewHostList()
    {
        try
        {
            var hostlist = new HostList {
                Name = _data.Name
            };

            await _hostlistsrepo.Create(hostlist);

            _data = new NewHostListDataModel();
            await OnInitAsync();
        }
        catch (Exception ex) { }
    }

    protected async Task DeleteHostList(HostList hostlist)
    {
        try
        {
            await _hostlistsrepo.Delete(hostlist);
            await OnInitAsync();
        }
        catch (Exception ex) { }
    }

    protected async Task ToggleActiveState(HostList hostlist)
    {
        try
        {
            hostlist.IsValid = !hostlist.IsValid;
            await _hostlistsrepo.Update(hostlist);
            await OnInitAsync();
        }
        catch (Exception ex) { }
    }

    class NewHostListDataModel
    {
        [Required]
        public string Name { get; set; }
    }
}